import re

# Below are the template of the output.
HEADER = """\
                   TOEFL Vocabulary Generated by Python

                               Name: Mao Licheng      Student ID: 115010202

"""

HEADER_REV = """\
    TOEFL Vocabulary (Right to left alphabetical sequence)Generated by Python

                               Name: Mao Licheng      Student ID: 115010202

"""


TEMPLATE = """
{index}: {word}

\t\t{meaning}{example_start}{example}{synonym}{antonym}
"""

EXAMPLE_START = 'E.g.: '


class Word(object):
    # The word class contains several attribute.
    def __init__(self, spelling):
        # self.__index = index
        self.__spelling = spelling.capitalize()
        self.__meaning = ''
        self.__example = ''
        self.__synonym = []
        self.__antonym = []

    def set_meaning(self, other):
        self.__meaning = other

    def set_example(self, other):
        self.__example = other

    def set_synonym(self, synonym):
        if len(self.__synonym) == 0:
            self.__synonym = synonym

    def set_antonym(self, antonym):
        if len(self.__antonym) == 0:
            self.__antonym = antonym

    def get_synonym(self):
        if len(self.__synonym) == 0:
            return ''
        else:
            return '\n\n\t\tSynonym:\n\t\t\t' + '\n\t\t\t'.join(i.strip() for i in self.__synonym)

    def get_antonym(self):
        if len(self.__antonym) == 0:
            return ''
        else:
            return '\n\n\t\tAntonym:\n\t\t\t' + '\n\t\t\t'.join(i.strip() for i in self.__antonym)

    def print_word(self, other):
        # Replace the short codes in the template
        print_value = TEMPLATE
        print_value = print_value.replace('{index}', str(other))
        print_value = print_value.replace('{word}', self.__spelling)
        print_value = print_value.replace('{meaning}', self.__meaning)
        if self.__example is '':
            print_value = print_value.replace('{example_start}', '')
            print_value = print_value.replace('{example}', '')
        else:
            print_value = print_value.replace('{example_start}', '\n\n\t\t' + EXAMPLE_START)
            print_value = print_value.replace('{example}', self.__example)
        print_value = print_value.replace('{synonym}', self.get_synonym())
        print_value = print_value.replace('{antonym}', self.get_antonym())
        return print_value


def main():
    # Regex pre-compile
    re_word = re.compile(r"^([A-Z]+) *[:.,;] *((?:\b[a-zA-Z\-\']+\b|[ \(\),.])+)(?:(?: - )|$)([^\n]*)$")
    re_synonym = re.compile(r'^Synonym(?:s)? *[:.,;] *((?:\b[a-zA-Z\-]+\b|[, \(\)])+)$')
    re_antonym = re.compile(r'^Antonym(?:s)? *[:.,;] *((?:\b[a-zA-Z\-]+\b|[, \(\)])+)$')
    # Load from file
    with open('./TOEFL Vocabulary(updated).txt', 'r') as dict_handle:
        raw_file = dict_handle.read().split('\n')
    # Initializing
    dictionary = {}
    word_series = []
    word_index = 0
    # Read lines and recognise the line type by word, synonym, antonym
    for line in raw_file:
        try:
            # Skip empty or comment line.
            if line.startswith('#') or len(line) == 0:
                continue
            # Match type Word
            if re_word.match(line):
                word_index += 1
                word = re_word.match(line).group(1)
                meaning = re_word.match(line).group(2)
                example = re_word.match(line).group(3)
                word_series.append(word)
                dictionary[word] = Word(word)
                if meaning is not None:
                    dictionary[word].set_meaning(meaning)
                if example is not None:
                    dictionary[word].set_example(example)
                # Match type Synonym
            elif re_synonym.match(line):
                # a=re_synonym.match(line).group(2)
                dictionary[word].set_synonym(re_synonym.match(line).group(1).split(','))
            # Match type Antonym
            elif re_antonym.match(line):
                dictionary[word].set_antonym(re_antonym.match(line).group(1).split(','))
            else:
                raise IOError('Cannot recognize this input, pleas check it...')
        # Print Line cannot be recognized
        except IOError:
            print('[TypeError]: Cannot recognize "{}"'.format(line))
    # Prepare for the first file
    write_file = HEADER
    for i in range(len(word_series)):
        write_file += dictionary[word_series[i]].print_word(i+1)
    # Write first file
    with open('./vocabulary.doc', 'w') as f:
        f.write(write_file)
    # Reverse the order and resort
    for i in range(len(word_series)):
        reverse_word = list(word_series[i])
        reverse_word.reverse()
        word_series[i] = ''.join(reverse_word)
    word_series.sort()
    for i in range(len(word_series)):
        reverse_word = list(word_series[i])
        reverse_word.reverse()
        word_series[i] = ''.join(reverse_word)
    # Prepare for the second file
    write_file = HEADER
    for i in range(len(word_series)):
        write_file += dictionary[word_series[i]].print_word(i+1)
    # Write the second file
    with open('./vocabulary(reversed).doc', 'w') as f:
        f.write(write_file)
    print('Done!')

if __name__ == '__main__':
    main()
